import streamlit as st
import os
from dotenv import load_dotenv
import openai
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import requests

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Chatbot - Mercado El√©ctrico",
    page_icon="ü§ñ",
    layout="wide"
)

# Cargar variables de entorno
env_path = os.path.join(os.path.dirname(__file__), '..', 'key.env')
load_dotenv(env_path)

# Obtener API keys
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
EIA_API_KEY = os.getenv('EIA_API_KEY')

# Verificar API keys
if not EIA_API_KEY:
    st.error("‚ö†Ô∏è No se encontr√≥ la API key de EIA. Por favor, aseg√∫rate de que el archivo 'key.env' existe y contiene tu API key de EIA.")
    st.stop()

if not OPENAI_API_KEY:
    st.error("‚ö†Ô∏è No se encontr√≥ la API key de OpenAI. Por favor, aseg√∫rate de que el archivo 'key.env' existe y contiene tu API key de OpenAI.")
    st.stop()

# Inicializar el cliente de OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# T√≠tulo y descripci√≥n
st.title("ü§ñ Chatbot Asistente")
st.markdown("""
¬°Hola! Soy tu asistente virtual especializado en el mercado el√©ctrico. 
Puedo ayudarte a entender mejor el sector energ√©tico y responder tus preguntas sobre:
- Precios y tarifas del mercado el√©ctrico
- Tendencias y an√°lisis del sector
- Conceptos t√©cnicos y regulaciones
- Datos hist√≥ricos y proyecciones
""")

# Inicializar el historial del chat en session_state si no existe
if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "assistant",
            "content": """¬°Hola! Soy tu asistente virtual especializado en el mercado el√©ctrico. 
            ¬øEn qu√© puedo ayudarte hoy? Aqu√≠ hay algunas preguntas que puedo responder:

            1. ¬øCu√°l es el precio actual del gas natural?
            2. ¬øC√≥mo funciona el mercado el√©ctrico mayorista?
            3. ¬øQu√© factores influyen en los precios de la electricidad?
            4. ¬øCu√°les son las √∫ltimas tendencias en el sector energ√©tico?
            5. ¬øC√≥mo se calculan las tarifas el√©ctricas?

            ¬°Adelante, hazme cualquier pregunta!"""
        }
    ]

# Mostrar mensajes anteriores
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input del usuario
if prompt := st.chat_input("¬øQu√© te gustar√≠a saber sobre el mercado el√©ctrico?"):
    # Agregar mensaje del usuario al historial
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    # Mostrar mensaje del usuario
    with st.chat_message("user"):
        st.markdown(prompt)

    # Obtener respuesta del asistente
    with st.chat_message("assistant"):
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": """Eres un asistente especializado en el mercado el√©ctrico. 
                    Tu objetivo es proporcionar informaci√≥n precisa y √∫til sobre el sector energ√©tico, 
                    incluyendo precios, tendencias, regulaciones y conceptos t√©cnicos. 
                    Mant√©n un tono profesional pero amigable, y siempre intenta ser lo m√°s espec√≠fico posible 
                    en tus respuestas."""},
                    *[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages]
                ]
            )
            response_content = response.choices[0].message.content
            st.markdown(response_content)
            
            # Agregar respuesta del asistente al historial
            st.session_state.messages.append({"role": "assistant", "content": response_content})
        except Exception as e:
            st.error(f"Error al obtener respuesta: {str(e)}")

# Bot√≥n para volver a la p√°gina principal
if st.button("Volver a la p√°gina principal"):
    st.switch_page("App.py") 